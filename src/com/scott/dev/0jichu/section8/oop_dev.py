# -*- coding:utf-8 -*-

'''
类和对象
Created on 2018年10月25日

@author: user
'''


#类:是对客观世界中事物的抽象；对象:是类实例化后的实体
#python使用class关键字定义一个类,类名的首字符一般大写。
#当创建的类型不能用简单类型来表示时，则需要定义类，然后利用定义的类创建对象，
#类把需要使用的变量和方法组合在一起，这种方式称为封装，定义类有两种方式:
#继承自object
#class ClassName(object):...
#不显式继承object
#class ClassName: ...

#类创建
#类的方法必需有一个self参数，但在调用时，可以不传递这个参数
class Fruit:
    #__init__:类的构造函数
    def __init__(self,name,color):
        self.name = name
        self.color = color
    def grow(self):
        print 'fruit growing now ...' 


#对象创建
#创建对象的过程称为实例化。当一个对象被创建后，包含3方面特性：对象的句柄、属性和方法
#对象的句柄用于区分不同的对象，当对象被创建后，该对象会获取一块存储空间，存储空间的地址即为对象的标识。
#对象的属性和方法与类的成员变量和成员方法相对应。

#属性和方法:
#类由属性和方法组成。类的属性是对数据的封装，而类的方法则表示对象具有的行为。
#类通常由函数(实例方法)和变量(类变量)组成
#python的构造函数、析构函数、私有属性或方法都通过名称约定区分的
#python还提供了一些有用的内置方法，简化了类的实现

#类的属性：
#类的属性一般分为私有属性和公有属性，python默认下所有属性都是公有的，
#这样对类中属性的访问将没有任何限制，并且会被子类继承，也能从子类中进行访问
#python使用约定属性名称来达到数据封装的目的，如果属性名字以两个下划线开始，就标识为私有属性，
#反之没有双下划线开始的表示公有属性，类的方法同样使用这样的约定


#Python的属性分为实例属性和静态属性：实例属性是以self作为前缀的属性。
#__init__方法即python类的构造函数，
#如果__init__方法中定义的遍历没有使用self作为前缀声明，则该变量只是普通的局部变量
#静态变量可以被类直接调用，当创建新的实例化对象时，静态变量并不会获得新的内存空间，而是使用类创建的内存空间
#


if __name__ == '__main__':
    fruit = Fruit('apple','red')
    fruit.grow()


